/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.cdstore;

import java.awt.Frame;
import java.awt.HeadlessException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author LENOVO
 */
public class CDFrame extends javax.swing.JFrame {

    ArrayList<CDdetail> list = new ArrayList<>();

    /**
     * Creates new form CDFrame
     */
    public CDFrame() {
        initComponents();
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        loadCD();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        NewCD = new javax.swing.JButton();
        BackUp = new javax.swing.JButton();
        Restore = new javax.swing.JButton();
        Refresh = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        Title = new javax.swing.JComboBox<>();
        Search = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        NewCD.setText("New CD");
        NewCD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewCDActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        getContentPane().add(NewCD, gridBagConstraints);

        BackUp.setText("Backup");
        BackUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackUpActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        getContentPane().add(BackUp, gridBagConstraints);

        Restore.setText("Restore");
        Restore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RestoreActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        getContentPane().add(Restore, gridBagConstraints);

        Refresh.setText("Refresh");
        Refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        getContentPane().add(Refresh, gridBagConstraints);

        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 19, 0, 19);
        getContentPane().add(Delete, gridBagConstraints);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title", "Collection", "Type", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(jScrollPane1, gridBagConstraints);

        Title.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Title", "Collection", "Type", "Price" }));
        Title.setToolTipText("");
        Title.setName("Title"); // NOI18N
        Title.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TitleActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        getContentPane().add(Title, gridBagConstraints);

        Search.setText("Search");
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        getContentPane().add(Search, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(jTextField1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NewCDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewCDActionPerformed
        // TODO add your handling code here:
        CDStoreFrame cdStoreFrame = new CDStoreFrame(this, true);
        // cdStoreFrame.setVisible(true);
        if (cdStoreFrame.getCd() != null) {
            list.add(cdStoreFrame.getCd());
            saveCD();
        }
    }//GEN-LAST:event_NewCDActionPerformed

    private void RefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshActionPerformed
        // TODO add your handling code here:
        fillInCDTable(list);
        saveCD();
    }//GEN-LAST:event_RefreshActionPerformed

    private void BackUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackUpActionPerformed
        // TODO add your handling code here:

        JFileChooser file = new JFileChooser();
        file.setDialogTitle("Specify a file to save");
        int userSelect = file.showSaveDialog(this);
        if (userSelect == JFileChooser.APPROVE_OPTION) {
            File fileToScave = file.getSelectedFile();
            System.out.println("Save as file" + fileToScave.getAbsolutePath());
        }
    }//GEN-LAST:event_BackUpActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        // TODO add your handling code here:
        delete();
        saveCD();
    }//GEN-LAST:event_DeleteActionPerformed

    private void TitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TitleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TitleActionPerformed

    private void RestoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RestoreActionPerformed
        // TODO add your handling code here:
        JFileChooserExam();
    }//GEN-LAST:event_RestoreActionPerformed

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        // TODO add your handling code here:
        fillInCDTable(Search());
    }//GEN-LAST:event_SearchActionPerformed

    /**
     * @param args the command line arguments
     */
    private ArrayList<CDdetail> Search() {
        String findText = Title.getSelectedItem().toString();
        ArrayList<CDdetail> search = new ArrayList<>();
        String key = jTextField1.getText();
        switch (findText) {
            case "Title":
                for (CDdetail cd:list) {
                    if (cd.getTitle().contains(key)) {
                        search.add(cd);
                    }

                }

            case "Collection":
                for (CDdetail cd:list) {
                    if (cd.getCollection().contains(key)) {
                        search.add(cd);
                    }

                }

            case "Type":
                for (CDdetail cd:list) {
                    if (cd.getType().contains(key)) {
                        search.add(cd);
                    }

                }

            case "Price":
                Double money = Double.valueOf(jTextField1.getText());
                for (CDdetail cd:list) {
                    if (cd.getPrice() <= money + 5 && cd.getPrice() >= money - 5) {
                        search.add(cd);
                    }
                }
        }
        return search;

    }

    private void JFileChooserExam() throws HeadlessException {
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("JPG & GIF Images", "jpg", "gif");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            System.out.println("You chose to open this file: "
                    + chooser.getSelectedFile().getName());
        }
    }

    private void delete() {
        int select = jTable1.getSelectedRow();
        list.remove(select);
    }

    private void fillInCDTable(ArrayList<CDdetail> list) {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int rowcount = model.getRowCount();
        for (int i = rowcount - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        for (CDdetail s : list) {
            Object[] rows = new Object[]{s.getTitle(), s.getCollection(), s.getType(), s.getPrice()};
            model.addRow(rows);
        }
        pack();
        saveCD();
    }
    String fileName = "CD.dat";

    private void saveCD() {
        try {
            ObjectOutputStream oStream = new ObjectOutputStream(new FileOutputStream(fileName));
            oStream.writeObject(list);
            oStream.close();
        } catch (IOException e) {
            System.out.println("Error save file" + e.getMessage());
        }
    }

    private void loadCD() {
        try {
            ObjectInputStream inStream = new ObjectInputStream(new FileInputStream(fileName));
            list = (ArrayList<CDdetail>) inStream.readObject();
            inStream.close();
        } catch (ClassNotFoundException e) {
            System.out.println("Class not found");
        } catch (IOException e) {
            System.out.println("Error load file");
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackUp;
    private javax.swing.JButton Delete;
    private javax.swing.JButton NewCD;
    private javax.swing.JButton Refresh;
    private javax.swing.JButton Restore;
    private javax.swing.JButton Search;
    private javax.swing.JComboBox<String> Title;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
